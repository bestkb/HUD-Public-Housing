title = "% of Insurance & Cooperate"
)
mySpectrum <- rev(heat.colors(spectrumBins))[1:95]
binnedReflectance <- cut(dat$blue, spectrumBins)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 0, to = 1,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
spectrumBins <- 100 # Number of bins to use
mySpectrum <- rev(heat.colors(spectrumBins))[1:90]
binnedReflectance <- cut(dat$blue, spectrumBins)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 0, to = 1,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
mySpectrum <- rev(heat.colors(spectrumBins))[1:100]
binnedReflectance <- cut(dat$blue, spectrumBins)
binnedReflectance
mySpectrum <- rev(heat.colors(spectrumBins))[10:100]
binnedReflectance <- cut(dat$blue, spectrumBins)
binnedReflectance <- cut(dat$blue, 90)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
spectrumBins <- 100 # Number of bins to use
mySpectrum <- rev(heat.colors(spectrumBins))[2:100]
binnedReflectance <- cut(dat$blue, 99)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
mySpectrum <- rev(heat.colors(spectrumBins))[5:100]
binnedReflectance <- cut(dat$blue, 99)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 0, to = 1,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
2
mySpectrum <- rev(heat.colors(spectrumBins))[2:100]
binnedReflectance <- cut(dat$blue, 90)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
mySpectrum <- rev(heat.colors(spectrumBins))[3:100]
binnedReflectance <- cut(dat$blue, 90)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 0, to = 1,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
mySpectrum <- heat.colors(spectrumBins)[3:100]
binnedReflectance <- cut(dat$blue, 90)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 0, to = 1,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
View(dat)
mySpectrum <- rev(heat.colors(spectrumBins))[3:100]
binnedReflectance <- cut(dat$blue, 90)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 0, to = 1,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 1, to = 0,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 1, to = 0,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
###
spectrumBins <- 100 # Number of bins to use
mySpectrum <- rev(heat.colors(spectrumBins))[3:100]
binnedReflectance <- cut(dat$yellow, 90)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 1, to = 0,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
View(dat)
###
spectrumBins <- 100 # Number of bins to use
mySpectrum <- rev(heat.colors(spectrumBins))[3:100]
binnedReflectance <- cut(dat$K, 90)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = 1, to = 0,
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
View(dat)
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = max(binnedReflectance), to = min(binnedReflectance),
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "% of Insurance & Cooperate"
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = max(dat$K), to = min(dat$K),
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "levee level"
)
###
spectrumBins <- 100 # Number of bins to use
mySpectrum <- rev(heat.colors(spectrumBins))[3:100]
binnedReflectance <- cut(dat$com, 90)
pointCol <- mySpectrum[binnedReflectance]
sizes <- 2.4
pointSize <- sizes
# Initialize the plot
TernaryPlot(atip = expression(I-C),
btip = expression(I-D),
ctip = expression(X-D)
)
TernaryPoints(dat[, c("oc", "od", "xd")],
cex = pointSize, # Point size
col = pointCol,  # Point colour
pch = 16         # Plotting symbol (16 = filled circle)
)
PlotTools::SpectrumLegend(
"topleft",
cex = 0.8, # Font size
palette = mySpectrum,
legend = paste(
seq(from = max(dat$com), to = min(dat$com),
length.out = 5)
),
bty = "n", # No framing box
xpd = NA, # Don't clip at margins
# title.font = 2, # Bold. Supported from R 3.6 onwards
title = "levee level"
)
install.packages("glue")
library(glue)
install.packages("amen")
packageVersion(glue)
packageVersion("glue")
library(tergm)
install.packages("rlang")
# Shapley
idx_sea_mi <-which(colnames(train_sea) == "Mutinfo")
explain_rf_sea_mi_updated <- update_data(explain_rf_sea_mi,
data = test_sea[, -idx_sea_mi],
y = test_sea[,idx_sea_mi])
library(tidyverse)
library(readxl)
library(tidycensus)
library(tigris)
insp_w_census <- read_csv("../data/locations_inspectionscores_forMeri_Feb.csv") %>%
mutate(tract = substr(as.character(block_group), 1, 11))
get_wd()
get.wd()
getwd()
te_cal <- function(x,y,lag){
x1 <- x[1:(length(x)-lag)]
x2 <- x[(1+lag):length(x)]
y1 <- y[1:(length(x)-lag)]
# ts <- data.frame(x1,x2,y1)
# joint_prob <- prop.table(table(ts))
# cond_prob <-
joint_count <- x2 + 2 * x1 + 2^2 * y1 + 1
joint <- sapply(c(1:8), function(x) sum(joint_count == x))/length(x1)
mag_xy_count <- x1 + 2 * y1 + 1
mag_xy <- sapply(c(1:4), function(x) sum(mag_xy_count == x))/length(x1)
mag_xy <- rep(mag_xy, each = 2)
mag_xx_count <- x2 + 2 * x1 + 1
mag_xx <- sapply(c(1:4), function(x) sum(mag_xx_count == x))/length(x1)
mag_xx <- rep(mag_xx, times = 2)
mag_x_count <- x1 + 1
mag_x <- sapply(c(1:2), function(x) sum(mag_x_count == x))/length(x1)
mag_x <- rep(mag_x, each = 2, times = 2)
idx <- joint != 0
mag_xy <- mag_xy[idx]
mag_xx <- mag_xx[idx]
mag_x <- mag_x[idx]
joint <- joint[idx]
te <- sum(joint * log2(joint * mag_x / (mag_xy * mag_xx)), na.rm = TRUE)
return(te)
}
ce_cal <- function(x,lag){
x1 <- x[1:(length(x)-lag)]
x2 <- x[(1+lag):length(x)]
mag_xx_count <- x2 + 2 * x1 + 1
mag_xx <- sapply(c(1:4), function(x) sum(mag_xx_count == x))/length(x1)
mag_x_count <- x2 + 1
mag_x <- sapply(c(1:2), function(x) sum(mag_x_count == x))/length(x1)
mag_x <- rep(mag_x,times = 2)
idx <- mag_xx != 0
mag_x <- mag_x[idx]
mag_xx <- mag_xx[idx]
ce <- -sum(mag_xx * log2(mag_xx / mag_x))
return(ce)
}
x = c(1,1,0,0,1,1,1,1,0)
y = c(1,0,0,0,1,0,0,1,1)
te_cal(y,x,1)
te_cal(x,y,1)
library(RTransferEntropy)
transfer_entropy(x,y)
ce_cal(y,1)
ce_cal(x,1)
View(ce_cal)
ce_cal(y,1)
j <- c(1/4,1/4,1/8,1/8,0,1/8,0,1/8)
x_y <- c(3/8,3/8,3/8,3/8,0,0,1/4,1/4)
x_x <- c(1/2,1/4,1/8,1/8,1/2,1/4,1/8,1/8)
x <- c(3/4,1/4,3/4,1/4,3/4,1/4,3/4,1/4)
log_in <- (j / x_y) / (x_x / x)
j * log2(log_in)
sum(j * log2(log_in),na.rm = FALSE)
sum(j * log2(log_in),na.rm = TRUE)
View(te_cal)
idx <- j != 0
log_in <- (j[idx] / x_y[idx]) / (x_x[idx] / x[idx])
j[idx] * log2(log_in)
sum(j * log2(log_in),na.rm = TRUE)
sum(j * log2(log_in),na.rm = FALSE)
j[idx]
x_y[idx]
idx
library(RTransferEntropy)
# Define the sequences
x1 <- c(1, 1, 0, 0, 1, 1, 1, 1, 0)
x2 <- c(1, 0, 0, 0, 1, 0, 0, 1, 1)
# Calculate the transfer entropy from x1 to x2
te_result <- transfer_entropy(x1, x2)
# Print the result
print(te_result)
ce_cal(x2,1)
log_in <- (c(1/4,1/4,1/8,1/8,1/8) / c(3/8,3/8,3/8,3/8,1/4)) / (c(1/2,1/4,1/8,1/8,1/8) / c(3/4,1/4,3/4,1/4,1/4))
log2(log_in)
c(1/4,1/4,1/8,1/8,1/8) * log2(log_in)
sum(c(1/4,1/4,1/8,1/8,1/8) * log2(log_in))
setwd(dirname(dirname(rstudioapi::getSourceEditorContext()$path)))
nri <- read_csv("data/NRI_Table_CensusTracts.csv")
nri <- nri %>%
select(c("TRACTFIPS","RISK_RATNG","SOVI_RATNG","RESL_RATNG","CFLD_RISKR","HWAV_RISKR",
"HRCN_RISKR","RFLD_RISKR","WFIR_RISKR"))
getwd()
nri <- read_csv("data/NRI_Table_CensusTracts.csv")
inspection_scores$block_group <- floor(inspection_scores$block/1000)
library(tidyverse)
library(readxl)
library(tidycensus)
library(tigris)
library(dplyr)
library(gstat)
library(sp)
nri <- read_csv("data/NRI_Table_CensusTracts.csv")
nri <- nri %>%
select(c("TRACTFIPS","RISK_RATNG","SOVI_RATNG","RESL_RATNG","CFLD_RISKR","HWAV_RISKR",
"HRCN_RISKR","RFLD_RISKR","WFIR_RISKR"))
# nri <- read_csv("data/NRI_Table_CensusTracts.csv")
# nri <- nri %>%
#   select(c("TRACTFIPS","RISK_RATNG","SOVI_RATNG","RESL_RATNG","CFLD_RISKR","HWAV_RISKR",
#            "HRCN_RISKR","RFLD_RISKR","WFIR_RISKR"))
write.csv(nri,"data/NRI_Table_CensusTracts.csv")
